#include <conio.h>
#include <iostream>

using namespace std;
void cargar (int vec[],int n)
{ int i;
	for(i=0; i<n; i++)
	{ cout<< " carga tu vector amigo"<< endl;
	cin>> vec[i];
	}
}
void mostrar(int vec[], int n)
{ int i;
	for(i=0; i<n; i++)
	{ cout<< "vec["<< i <<"]:"<< vec[i]<< endl;
	}
}

void vectoresimpar(int veca[], int na,int vecb[], int &nb)
{ int i; 
   nb = 0;
		for(i=0; i<na; i++)
		{	if( veca[i]%2 != 0)
			{ vecb[nb] = veca[i];
			nb++;
			}
		}

}
int repetido(int vec[], int n, int elem)
{ int i, c=0;
	for(i=0; i<n; i++)
	{  if(vec[i]==elem)
		{ c++;
	}
	}
	return (c);
}
bool verifexiste(int vec[], int n, int elem)
{ int i;
	bool k = false;
	if(vec[i]==elem)
	{	k = true;
		i = n;
	}
	return (k);
}
void ejercicio(int veca[], int na, int vb[], int &nb)
{ int i; 
 nb=0;
	for(i=0; i<na; i++)
	{ 
		if((repetido(veca,na,veca[i])>1)&&(verifexiste(vb,nb,veca[i]==false)))
	{ vb[nb]=veca[i];
		nb++;
	}
	}
}
//int ascendente(int vec[], int n)
{ int i,j,vecb[100], b= vecb[0],aux;
		for(i=0; i<n; i++)
		{	if(vec[i]>=b)
		{		b=vec[i];
				aux=b;
		} 
		}
	return(aux);
}

void main()
{ int a, vec[20],veca[20],vb[20],nb,l;
	cout<<" cuantos elementos en su vector quiere pariente (no mas de 20) "<< endl;
	cin>> a;
	cargar(vec,a);
	mostrar(vec,a);
	vectoresimpar(vec,a,vb,nb);
	cout<< "el vector con los impares es:"<< endl;
	mostrar(vb,nb);
	cout<<"el otro vector cargado con los elementos frecuente es: "<< endl;
	ejercicio(vec, a, vb,nb);
	mostrar (vb,nb);
	l = ascendente(vec,a);


	getch();
}

// realizar un vector ya cargado debe mostrar la frecuencia de repeticion de cada elemento, tomando en cuenta la sgte restricciones:
// solo usar un vector
// no se puede ordenar el vector
// no se modifica el contenido del vector
// no se puede mostrar mas de una vez la frecuencia de un elemento

